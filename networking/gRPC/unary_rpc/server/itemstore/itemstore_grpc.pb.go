// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: itemstore.proto

package itemstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ItemStoreService_CheckStorageAvailability_FullMethodName = "/main.ItemStoreService/CheckStorageAvailability"
	ItemStoreService_DeliverItemToStorage_FullMethodName     = "/main.ItemStoreService/DeliverItemToStorage"
)

// ItemStoreServiceClient is the client API for ItemStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemStoreServiceClient interface {
	CheckStorageAvailability(ctx context.Context, in *ItemStoreAvailabilityRequest, opts ...grpc.CallOption) (*ItemStoreAvailabilityResponse, error)
	DeliverItemToStorage(ctx context.Context, in *ItemStoreRequest, opts ...grpc.CallOption) (*ItemStoreResponse, error)
}

type itemStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemStoreServiceClient(cc grpc.ClientConnInterface) ItemStoreServiceClient {
	return &itemStoreServiceClient{cc}
}

func (c *itemStoreServiceClient) CheckStorageAvailability(ctx context.Context, in *ItemStoreAvailabilityRequest, opts ...grpc.CallOption) (*ItemStoreAvailabilityResponse, error) {
	out := new(ItemStoreAvailabilityResponse)
	err := c.cc.Invoke(ctx, ItemStoreService_CheckStorageAvailability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemStoreServiceClient) DeliverItemToStorage(ctx context.Context, in *ItemStoreRequest, opts ...grpc.CallOption) (*ItemStoreResponse, error) {
	out := new(ItemStoreResponse)
	err := c.cc.Invoke(ctx, ItemStoreService_DeliverItemToStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemStoreServiceServer is the server API for ItemStoreService service.
// All implementations must embed UnimplementedItemStoreServiceServer
// for forward compatibility
type ItemStoreServiceServer interface {
	CheckStorageAvailability(context.Context, *ItemStoreAvailabilityRequest) (*ItemStoreAvailabilityResponse, error)
	DeliverItemToStorage(context.Context, *ItemStoreRequest) (*ItemStoreResponse, error)
	mustEmbedUnimplementedItemStoreServiceServer()
}

// UnimplementedItemStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedItemStoreServiceServer struct {
}

func (UnimplementedItemStoreServiceServer) CheckStorageAvailability(context.Context, *ItemStoreAvailabilityRequest) (*ItemStoreAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStorageAvailability not implemented")
}
func (UnimplementedItemStoreServiceServer) DeliverItemToStorage(context.Context, *ItemStoreRequest) (*ItemStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverItemToStorage not implemented")
}
func (UnimplementedItemStoreServiceServer) mustEmbedUnimplementedItemStoreServiceServer() {}

// UnsafeItemStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemStoreServiceServer will
// result in compilation errors.
type UnsafeItemStoreServiceServer interface {
	mustEmbedUnimplementedItemStoreServiceServer()
}

func RegisterItemStoreServiceServer(s grpc.ServiceRegistrar, srv ItemStoreServiceServer) {
	s.RegisterService(&ItemStoreService_ServiceDesc, srv)
}

func _ItemStoreService_CheckStorageAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemStoreAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemStoreServiceServer).CheckStorageAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemStoreService_CheckStorageAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemStoreServiceServer).CheckStorageAvailability(ctx, req.(*ItemStoreAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemStoreService_DeliverItemToStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemStoreServiceServer).DeliverItemToStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ItemStoreService_DeliverItemToStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemStoreServiceServer).DeliverItemToStorage(ctx, req.(*ItemStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemStoreService_ServiceDesc is the grpc.ServiceDesc for ItemStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.ItemStoreService",
	HandlerType: (*ItemStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckStorageAvailability",
			Handler:    _ItemStoreService_CheckStorageAvailability_Handler,
		},
		{
			MethodName: "DeliverItemToStorage",
			Handler:    _ItemStoreService_DeliverItemToStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "itemstore.proto",
}
